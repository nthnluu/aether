package server

import "google.golang.org/grpc"

// GRPCService is a Service for serving gRPC requests. This service handles requests to the methods specified by
// serviceDesc with the registered actions in service. This means that service must implement the service described by
// serviceDesc using the interface generated by the Protocol Buffer compiler.
type GRPCService struct {
	serviceDesc *grpc.ServiceDesc
	service     interface{}
}

// Service returns the registered service.
func (s *GRPCService) Service() interface{} {
	return s.service
}

// ServiceDesc returns the service descriptor.
func (s *GRPCService) ServiceDesc() *grpc.ServiceDesc {
	return s.serviceDesc
}

// AddRequestInterceptor adds a function that will be called with an incoming request before the action is called.
// Interceptors are called in FIFO order: interceptors added first will be called first.
func (s *GRPCService) AddRequestInterceptor() {
}

// AddResponseInterceptor adds a function that will be called with an outgoing response before it's sent to the caller.
// Interceptors are called in FIFO order: interceptors added first will be called first.
func (s *GRPCService) AddResponseInterceptor() {
}

// AddRequestValidator adds a function that will be called with an outgoing response before it's sent to the caller.
// Interceptors are called in FIFO order: interceptors added first will be called first.
func (s *GRPCService) AddRequestValidator(desc *grpc.MethodDesc, validator func(req interface{}) bool) {

}

// NewGRPCService creates a gRPC server that can be served. It registers the methods from the given service to the
// methods from the given service descriptor. In other words: service must implement ever methods of the service
// interface generated by the Protocol Buffer compiler.
func NewGRPCService[Service any](serviceDesc *grpc.ServiceDesc, service interface{}) *GRPCService {
	return &GRPCService{
		serviceDesc: serviceDesc,
		service:     service,
	}
}
