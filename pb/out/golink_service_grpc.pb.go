// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: golink_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoLinkServiceClient is the client API for GoLinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoLinkServiceClient interface {
	// Look up a go link using its slug.
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	// Create a new go link using the provided slug and destination URL.
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error)
}

type goLinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoLinkServiceClient(cc grpc.ClientConnInterface) GoLinkServiceClient {
	return &goLinkServiceClient{cc}
}

func (c *goLinkServiceClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/golink.GoLinkService/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goLinkServiceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error) {
	out := new(CreateLinkResponse)
	err := c.cc.Invoke(ctx, "/golink.GoLinkService/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoLinkServiceServer is the server API for GoLinkService service.
// All implementations must embed UnimplementedGoLinkServiceServer
// for forward compatibility
type GoLinkServiceServer interface {
	// Look up a go link using its slug.
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	// Create a new go link using the provided slug and destination URL.
	CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error)
	mustEmbedUnimplementedGoLinkServiceServer()
}

// UnimplementedGoLinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoLinkServiceServer struct {
}

func (UnimplementedGoLinkServiceServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedGoLinkServiceServer) CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedGoLinkServiceServer) mustEmbedUnimplementedGoLinkServiceServer() {}

// UnsafeGoLinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoLinkServiceServer will
// result in compilation errors.
type UnsafeGoLinkServiceServer interface {
	mustEmbedUnimplementedGoLinkServiceServer()
}

func RegisterGoLinkServiceServer(s grpc.ServiceRegistrar, srv GoLinkServiceServer) {
	s.RegisterService(&GoLinkService_ServiceDesc, srv)
}

func _GoLinkService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLinkServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golink.GoLinkService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLinkServiceServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoLinkService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoLinkServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golink.GoLinkService/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoLinkServiceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoLinkService_ServiceDesc is the grpc.ServiceDesc for GoLinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoLinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "golink.GoLinkService",
	HandlerType: (*GoLinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _GoLinkService_Lookup_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _GoLinkService_CreateLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golink_service.proto",
}
